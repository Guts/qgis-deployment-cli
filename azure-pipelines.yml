# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - main
  tags:
    include:
    - "*"

pr:
- main

# -- GLOBAL VARIABLES ------------------------------------------------------------------
variables:
  packageFolderName: "scan_offline"
  packageName: "isogeo-scan-offline"
  pythonVersion: "3.8"
  vmImageName: "windows-2019"

# -- STAGES ----------------------------------------------------------------------------

stages:

- stage: BuildApp
  # --  BUILD --------------------------------------------------------------------------
  displayName: "Build and package application"
  condition: |
    and(
      succeeded(),
      ne(variables['System.PullRequest.SourceBranch'], 'docs')
    )

  jobs:
  - job: 'BuildApp'
    displayName: "Packaging into a Windows executable"
    pool:
      vmImage: $(vmImageName)
    strategy:
      matrix:
        Python38_VS19_64bits:
          python.version: $(pythonVersion)
          python.arch: 'x64'
        Python38_VS19_32bits:
          python.version: $(pythonVersion)
          python.arch: 'x86'
      # maxParallel: 2

    steps:
    # no need for source code
    - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
      fetchDepth: 10

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        architecture: '$(python.arch)'
        addToPath: true

    - script: |
        python -m pip install -U pip --cache-dir ./.pipcache
        python -m pip install -U -r ./requirements/base.txt --cache-dir ./.pipcache
        python -m pip install -U -r ./requirements/packaging.txt --cache-dir ./.pipcache
      displayName: 'Install dependencies'

    - script: python -m pip install -e .
      displayName: 'Install project'

    - script: python .\builder\version_info_templater.py
      displayName: 'Generate Version Info'

    - script: python -O .\builder\pyinstaller_build_windows.py
      displayName: 'Building the CLI executable with PyInstaller'

    - script: '$(System.DefaultWorkingDirectory)/dist/Isogeo_ScanOffline.exe --version'
      displayName: 'Minimal test of executable'

    - task: CopyFiles@2
      displayName: "Copy the '.env.example' file into the final folder"
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/'
        Contents: '.env.example'
        TargetFolder: '$(System.DefaultWorkingDirectory)/dist'
